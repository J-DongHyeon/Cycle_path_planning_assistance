#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('iotserver:server');
 var http = require('http');
 
 /**
  * Get port from environment and store in Express.
  */
 
 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);
 
 /**
  * Create HTTP server.
  */
 
 var server = http.createServer(app);
 
 // Connect Mongo DB 
 var mongoDB = require("mongodb").MongoClient;
 var url = "mongodb://127.0.0.1:27017";
 var dbObj = null;
 mongoDB.connect(url, function(err, db){
   dbObj = db;
   console.log("DB connect");
 });
 
 /**
  * MQTT subscriber (MQTT Server connection & Read resource data)
  */
 var mqtt = require("mqtt");
 const { stringify } = require('querystring');
 var mqtt_client = mqtt.connect("mqtt://127.0.0.1")
 
 // 접속에 성공하면, 'result' 토픽을 구독.
 mqtt_client.on("connect", function(){
   mqtt_client.subscribe("result");
   console.log("Subscribing result");
 })

// socket에 연결
var io = require("socket.io")(server);
var g_socket;
io.on("connection", function(socket){
  g_socket = socket;

  // html로부터 출발지, 목적지 데이터를 받으면 DB에 저장
  socket.on("path_str", function(data){

    var str = "{\"path\": \"" + data[0] + " -> " + data[1] + "\" }";
    var obj = JSON.parse(str);
    obj.creat_at = new Date();
    
    var cursor = dbObj.db("Resources").collection("Search History");
    cursor.insertOne(obj, function(err, result){
      if(err){console.log(err);}
      else{console.log(JSON.stringify(result));}
    });
  });

  // html로부터 시간 정보와 출발지, 목적지 위도, 경도 데이터를 받으면 Mqtt publish
  socket.on("path_LatLng", function(data){
    mqtt_client.publish("path", data[0] + ' ' + data[1] + ' ' + data[2] + ' ' + data[3] + ' ' + data[4]);
    console.log(data)
  });
});

// MQTT 응답 메세지 수신시 html로 전송
mqtt_client.on("message", function(topic, message){

  if (topic == "result"){
    const str = message.toString();
    const data = str.split("&");
    g_socket.emit("result", data);

    console.log("str : " + str);
    console.log(data);
    console.log("---");
  }
}); 
 
 
 /**
  * Listen on provided port, on all network interfaces.
  */
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 function normalizePort(val) {
   var port = parseInt(val, 10);
   if (isNaN(port)) {
     // named pipe
     return val;
   }
   if (port >= 0) {
     // port number
     return port;
   }
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }

